'''
===================
Pipeline Souporcell
===================


Overview
========

This pipeline performs the following steps:
* Demultiplex cells with or without genotype informationin in each input

Configuration
-------------

The pipeline requires a configured file:`pipeline_souporcell.yml` file.

Default configuration files can be generated by executing:
   cellhub souporcell config

Input files
-----------

* A demultiplex.tsv file is required for demultiplexing. It must have the following columns:
    * "bam_file": the location of 'possorted_genome_bam.bam' file generated by 10x cellranger. (The cellhub cellranger step must support the generation of bam files.)
    * "barcode_file": the location of the barcode file generated by 10x cellranger.
    * "cluster_num": Number of clusters.
    * "vcf_file": Known variants per clone in population vcf mode (Optional).
    * "sample_names": Which samples in population vcf from vcf_file option represent the donors in your sample, names separated with space (Optional).


Dependencies
------------

Download singularity image (1.3gb) with command:
singularity pull shub://wheaton5/souporcell

Pipeline output
===============

* clusters.tsv saved in a '/souporcell.dir/<library_id>/' folder,
with the cell barcode, singlet/doublet status, cluster,
log_loss_singleton, log_loss_doublet, followed by log loss for each cluster.

* cluster_genotypes.vcf saved in a '/souporcell.dir/<library_id>/'
folder, which is a vcf with genotypes for each cluster.

* ambient_rna.txt saved in a '/souporcell.dir/<library_id>/' folder,
which contains the ambient RNA percentage detected.


Code
====
'''

from pathlib import Path
import sys
import os
import re
import sqlite3
import glob
import csv

from ruffus import *
import pandas as pd
import numpy as np

import cgatcore.experiment as E
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools
import cgatcore.database as database

# import local pipeline utility functions
import cellhub.tasks as T

# ----------------------- < pipeline configuration > ------------------------ #

# Override function to collect config files
P.control.write_config_files = T.write_config_files

# load options from the yml file
P.parameters.HAVE_INITIALIZED = False
PARAMS = P.get_parameters(T.get_parameter_file(__file__))

# set the location of the code directory
PARAMS["cellhub_code_dir"] = Path(__file__).parents[1]

# handle pipeline configuration
if len(sys.argv) > 1:
        if(sys.argv[1] == "config") and __name__ == "__main__":
                    sys.exit(P.main(sys.argv))
               
                
# ########################################################################### #
# ########################### Read Souporcell Table ######################### #
# ########################################################################### #

@follows(mkdir("souporcell.dir"))
def souporcell_job():
    
    with open(PARAMS["souporcell_demultiplex-table"], 'r') as csvfile:
        reader = csv.DictReader(csvfile, delimiter='\t')

        for row in reader:
            yield [row, os.path.join("souporcell.dir",row['library_id'], row['library_id']+".sentinel")]


# ########################################################################### #
# ############################ Run Souporcell tasks ######################### #
# ########################################################################### #

@files(souporcell_job)
def souporcell(infile, outfile):
    '''
    Run souporcell
    '''
    
    t = T.setup(None, outfile, PARAMS,
                memory=PARAMS["souporcell_localmem"],
                cpu=PARAMS["souporcell_localcores"])
    
    # input: read input bam files and barcode files
    library_id = infile['library_id']
    input_bam = os.path.realpath(infile['bam_file'])
    input_barcode = os.path.realpath(infile['barcode_file'])
    
    if PARAMS['souporcell_genotype-aware']:
        cluster_num_aware = infile['cluster_num']
        vcf_file = infile['vcf_file']
        sample_names = infile['sample_names']

    # output: specifying log file and output folder
    real_output_folder = os.path.realpath(os.path.dirname(outfile))
    real_logfile = os.path.realpath(outfile.replace(".sentinel", ".log"))

    # run souporcell
    
    if PARAMS['souporcell_genotype-aware']:
        statement = '''
        cd souporcell.dir;
        singularity exec --bind %(souporcell_bind-path)s:%(souporcell_bind-path)s %(souporcell_container-dir)s souporcell_pipeline.py
        -i %(input_bam)s
        -b %(input_barcode)s
        -f %(genome-reference)s
        -o %(real_output_folder)s
        -k %(cluster_num_aware)s
        -t %(souporcell_threads)s
        --known_genotypes %(vcf_file)s
        --known_genotypes_sample_names %(sample_names)s
        &> %(real_logfile)s
        ''' % dict(PARAMS, **locals())
    
    else:
        statement = '''
        cd souporcell.dir;
        singularity exec --bind %(souporcell_bind-path)s:%(souporcell_bind-path)s %(souporcell_container-dir)s souporcell_pipeline.py
        -i %(input_bam)s
        -b %(input_barcode)s
        -f %(genome-reference)s
        -o %(real_output_folder)s
        -k %(souporcell_cluster-number)s
        -t %(souporcell_threads)s
        &> %(real_logfile)s
        ''' % dict(PARAMS, **locals())

    P.run(statement, **t.resources)
    
    IOTools.touch_file(outfile)


@transform(souporcell, regex(r".*/.*/(.*).sentinel"),
           r"souporcell.dir/\1/\1.postsouporcell.sentinel")
def postsouporcell(infile, outfile):
    '''
    Refine output formatting to align with tables in other cellhub pipelines
    '''
    souporcell_dir = os.path.dirname(infile)
    library_id = os.path.basename(infile)[:-len(".sentinel")]
    cluster_file = os.path.join(souporcell_dir,"clusters.tsv")
    statement = '''
    cd %(souporcell_dir)s;
    awk '{if ($0 ~ /^barcode/) print "library_id\\t"$0; else print "%(library_id)s\\t"$0};' clusters.tsv > %(library_id)s.tsv
   '''

    P.run(statement)

    IOTools.touch_file(outfile)


@merge(postsouporcell,
      "souporcell.dir/souporcell.api.sentinel")
def souporcellAPI(infiles, outfile):
    '''
    Register the souporcell results on the cellhub API
    '''

    x = T.api("demultiplex")

    file_set = {}

    for f in infiles:
        library_id = os.path.basename(f)[:-len(".postsouporcell.sentinel")]
        cluster_path = os.path.join(os.path.dirname(f), library_id + ".tsv")

        file_set[library_id] = {"path": cluster_path,
                                "description": "Souporcell demultiplexing results for " + \
                                            library_id,
                                "format": "tsv"}

    x.define_dataset(analysis_name="souporcell",
                   file_set = file_set,
                   analysis_description = "demultiplex result from souporcell")

    x.register_dataset()

    IOTools.touch_file(outfile)

# ########################################################################### #
# ##################### full target: to run all tasks ####################### #
# ########################################################################### #


@follows(souporcellAPI)
def full():
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
