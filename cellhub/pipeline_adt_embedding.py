'''
================
Pipeline ADT co-embedding with GEX
================

Overview
========
This pipeline performs the following steps:

* It embeds DSB normalized ADT into UMAP and visualizes the protein expression on the UMAP layout
* Co-embed DSB-ADT with a GEX lower-dimensional representation using WNN (Seurat3)


Configuration
-------------
The pipeline requires a configured :file:`pipeline_adt_embedding.yml` file. Default configuration files can be generated by executing: ::

   python <srcdir>/pipeline_adt_embedding.py config


Input files
-----------
./ADT.mtx.dsb.full.dir
./integration.dir/*.exp.dir/*integrated.dir/*.run.dir/normalized_integrated_anndata.h5ad


Dependencies
------------
This pipeline requires:
* cgat-core: https://github.com/cgat-developers/cgat-core
* R dependencies required in the r scripts


Pipeline output
===============
The pipeline returns:
* adt.coembed.dir folder with ADT only UMAP embedding, ADT + GEX embeeding, ADT + GEX  WNN graph, and a ADT + GEX *.rds file (Seurat obejct).

Code
====

'''


from ruffus import *
from ruffus.combinatorics import *
import sys
import os
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools
from pathlib import Path
import pandas as pd
import glob

import cellhub.tasks.control as C
import cellhub.tasks.api as api

# Override function to collect config files
P.control.write_config_files = C.write_config_files


# -------------------------- < parse parameters > --------------------------- #

# load options from the yml file
parameter_file = C.get_parameter_file(__file__, __name__)
PARAMS = P.get_parameters(parameter_file)

# Set the location of the cellhub code directory
if "code_dir" not in PARAMS.keys():
    PARAMS["code_dir"] = Path(__file__).parents[1]
else:
    if PARAMS["code_dir"] != Path(__file__).parents[1]:
        raise ValueError("Could not set the location of "
                         "the pipeline code directory")
print(PARAMS)

# ----------------------- < pipeline configuration > ------------------------ #

# handle pipeline configuration
if len(sys.argv) > 1:
        if(sys.argv[1] == "config") and __name__ == "__main__":
                    sys.exit(P.main(sys.argv))


# ############################################################################ #
# ####################### CLR-ADT based UMAP embedding  ###################### #
# ############################################################################ #

@follows(mkdir("adt.coembed.dir"))
@files("ADT.mtx.full.dir/matrix.mtx.gz",
        "adt.coembed.dir/adt_clr_umap.sentinel")
def getCLRUMAP(infile, outfile):
    '''This task will run R/get_clr_umap_embedding.R,
    It will get UMAP 2D embedding directly from a UMI count matrix.
    Also it will plot the protein features and one cell metadata on top of the 
    calculated UMAP layout.
    '''

    outdir = os.path.dirname(outfile)
    mtx_dir = os.path.dirname(infile)

    colorvar = PARAMS["colorvar"]
    cell_meta = PARAMS["cellmeta"]
    nfeat = PARAMS["nfeat"]
    ncps = PARAMS["npcs"]
    log_file = outfile.replace(".sentinel", ".log")
    out_file = outfile.replace(".sentinel", ".pdf")

    # Other settings
    job_threads = PARAMS["resources_threads"]
    if ("G" in PARAMS["resources_job_memory"] or
        "M" in PARAMS["resources_job_memory"] ):
        job_memory = PARAMS["resources_job_memory"]

    # Formulate and run statement
    statement = '''Rscript %(code_dir)s/R/get_clr_umap_embedding.R
                 --adt=%(mtx_dir)s
                 --nfeat=%(nfeat)s
                 --npcs=%(npcs)s
                 --colorvar=%(colorvar)s
                 --cellmeta=%(cell_meta)s
                 --numcores=%(job_threads)s
                 --log_filename=%(log_file)s
                 --outfile=%(out_file)s
              '''
    P.run(statement)

    # Create sentinel file
    IOTools.touch_file(outfile)

# ############################################################################ #
# ####################### DSB-ADT based UMAP embedding  ###################### #
# ############################################################################ #


@follows(mkdir("adt.coembed.dir"))
@files("ADT.mtx.dsb.full.dir/matrix.mtx.gz",
        "adt.coembed.dir/adt_dsb_umap.sentinel")
def getUMAP(infile, outfile):
    '''This task will run R/get_adt_embedding.R,
    It will get UMAP 2D embedding directly from a DSB normalized matrix.
    Also it will plot the ADT features and one cell metadata on top of the 
    calculated UMAP layout.
    '''

    outdir = os.path.dirname(outfile)
    dsb_dir = os.path.dirname(infile)

    colorvar = PARAMS["colorvar"]
    cell_meta = PARAMS["cellmeta"]
    nfeat = PARAMS["nfeat"]
    log_file = outfile.replace(".sentinel", ".log")
    out_file = outfile.replace(".sentinel", ".pdf")

    # Other settings
    job_threads = PARAMS["resources_threads"]
    if ("G" in PARAMS["resources_job_memory"] or
        "M" in PARAMS["resources_job_memory"] ):
        job_memory = PARAMS["resources_job_memory"]

    # Formulate and run statement
    statement = '''Rscript %(code_dir)s/R/get_dsb_umap_embedding.R
                 --adt_dsb=%(dsb_dir)s
                 --nfeat=%(nfeat)s
                 --colorvar=%(colorvar)s
                 --cellmeta=%(cell_meta)s
                 --numcores=%(job_threads)s
                 --log_filename=%(log_file)s
                 --outfile=%(out_file)s
              '''
    P.run(statement)

    # Create sentinel file
    IOTools.touch_file(outfile)

@follows(mkdir("adt.coembed.dir"))
@files("ADT.mtx.dsb.full.dir/matrix.mtx.gz",
        "adt.coembed.dir/adt_gex_wnn.sentinel")
def runWNN(infile, outfile):
    '''This task will run R/get_adt_gex_wnn.R,
    It will get UMAP 2D embedding from the DSB normalized matrix & the GEX 
    lower-dimensional representation.
    '''

    outdir = os.path.dirname(outfile)
    dsb_dir = os.path.dirname(infile)

    gex_adata = PARAMS["adata"]
    gex_lowdim_name = PARAMS["lowdim"]
    gex_ndim = PARAMS["ndim"]
    adt_ndim = PARAMS["nfeat"]
    colorvar = PARAMS["colorvar"]
    cell_meta = PARAMS["cellmeta"]
    log_file = outfile.replace(".sentinel", ".log")
    out_file = outfile.replace(".sentinel", ".png")

    # Other settings
    job_threads = PARAMS["resources_threads"]
    if ("G" in PARAMS["resources_job_memory"] or
        "M" in PARAMS["resources_job_memory"] ):
        job_memory = PARAMS["resources_job_memory"]

    virtualenv = PARAMS["virtualenv"]
    python = PARAMS["python"]

    # Formulate and run statement
    statement = '''Rscript %(code_dir)s/R/get_adt_gex_wnn.R
                 --gex_adata=%(gex_adata)s
                 --low_dim=%(gex_lowdim_name)s
                 --nfeat=%(adt_ndim)s
                 --ndim=%(gex_ndim)s
                 --adt_dsb=%(dsb_dir)s
                 --colorvar=%(colorvar)s
                 --cellmeta=%(cell_meta)s
                 --numcores=%(job_threads)s
                 --virtualenv=%(virtualenv)s
                 --python=%(python)s
                 --log_filename=%(log_file)s
                 --outfile=%(out_file)s
              '''
    P.run(statement)

    # Create sentinel file
    IOTools.touch_file(outfile)


# ---------------------------------------------------
# Generic pipeline tasks

@follows(mkdir("adt.coembed.dir"))
@files(None, "adt.coembed.dir/plot.sentinel")
def plot(infile, outfile):
    '''Draw the pipeline flowchart'''

    pipeline_printout_graph ( "adt.coembed.dir/pipeline_flowchart.svg",
                          "svg",
                          [full],
                          no_key_legend=True)

    pipeline_printout_graph ( "adt.coembed.dir/pipeline_flowchart.png",
                          "png",
                          [full],
                          no_key_legend=True)

    IOTools.touch_file(outfile)


@follows(getCLRUMAP, getUMAP, runWNN, plot)
def full():
    '''
    Run the full pipeline.
    '''
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
