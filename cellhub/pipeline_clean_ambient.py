'''
================
Pipeline clean ambient RNA
================

Overview
========
This pipeline uses CellBender to remove ambient UMI counts.

Configuration
-------------
The pipeline requires a configured :file:`pipeline_clean_ambient.yml` file. Default configuration files can be generated by executing: ::

   python <srcdir>/pipeline_clean_ambient.py config


Input files
-----------

This pipeline requires the unfiltered gene-expression count matrix that
were output of the cellranger-multi pipeline

Dependencies
------------
This pipeline requires:
* cgat-core: https://github.com/cgat-developers/cgat-core
* R dependencies required in the r scripts


Pipeline output
===============
The pipeline returns a clean_ambient.dir folder containing one folder per sample 
conatining market matrices [features, barcodes] with the clean dataset. 

Code
====

'''


from ruffus import *
from ruffus.combinatorics import *
import sys
import os
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools
from pathlib import Path
import pandas as pd
import glob

import cellhub.tasks.control as C
import cellhub.tasks.api as api

# Override function to collect config files
P.control.write_config_files = C.write_config_files


# -------------------------- < parse parameters > --------------------------- #

# load options from the yml file
parameter_file = C.get_parameter_file(__file__, __name__)
PARAMS = P.get_parameters(parameter_file)

# Set the location of the cellhub code directory
if "code_dir" not in PARAMS.keys():
    PARAMS["code_dir"] = Path(__file__).parents[1]
else:
    if PARAMS["code_dir"] != Path(__file__).parents[1]:
        raise ValueError("Could not set the location of "
                         "the pipeline code directory")
print(PARAMS)

# ----------------------- < pipeline configuration > ------------------------ #

# handle pipeline configuration
if len(sys.argv) > 1:
        if(sys.argv[1] == "config") and __name__ == "__main__":
                    sys.exit(P.main(sys.argv))


# ############################################################################ #
# #################### Calculate seq depth distributions  #################### #
# ############################################################################ #

# Helper function for table line-counting
def _count_generator(reader):
  b = reader(1024 * 1024)
  while b:
    yield b
    b = reader(1024 * 1024)

@follows(mkdir("clean_ambient.dir"))
@transform(glob.glob("api/cellranger.multi/GEX/unfiltered/*/mtx/matrix.mtx.gz"),
           regex(r".*/.*/.*/.*/(.*)/mtx/matrix.mtx.gz"),
           r"clean_ambient.dir/\1/\1_cellbender.sentinel")
def cellbender(infile, outfile):
    '''
    This task will run the CellBender comand.
    Please visit ellbender.readthedocs.io for further details.
    '''

    outdir = os.path.dirname(outfile)
    if not os.path.exists(outdir):
        parentdir = os.path.dirname(outdir)
        if not os.path.exists(parentdir):
          os.mkdir(parentdir)
          os.mkdir(outdir)

    # UMI count matrices
    unfiltered_dir = os.path.dirname(infile)
    filtered_dir = unfiltered_dir.replace("unfiltered", "filtered")

    # Other settings
    job_threads = PARAMS["resources_threads"]
    if ("G" in PARAMS["resources_job_memory"] or
        "M" in PARAMS["resources_job_memory"] ):
        job_memory = PARAMS["resources_job_memory"]
        
    log_file = outfile.replace(".sentinel", ".log")
    out_file = outfile.replace(".sentinel", ".h5")
    
    # Expected number of cells from cellranger output
    barcode_file = os.path.join(filtered_dir, "barcodes.tsv.gz")
    os.system('gunzip '+ barcode_file)
    barcode_file = barcode_file.replace(".gz", "")
    with open(barcode_file, 'rb') as fp:
      c_generator = _count_generator(fp.raw.read)
      # count each \n
      cells = sum(buffer.count(b'\n') for buffer in c_generator) + 1
      print('Detected barcodes:', cells)
    fp.close()
    os.system('gzip '+ barcode_file)
    
    fdr = PARAMS["FDR"]
    epochs = PARAMS["number_epochs"]
    
    # Formulate and run statement
    statement = '''cellbender remove-background
                 --input=%(unfiltered_dir)s
                 --output=%(out_file)s 
                 --expected-cells=%(cells)s
                 --total-droplets-included=20000
                 --fpr=%(fdr)s
                 --epochs=%(epochs)s
                 --low-count-threshold=10
              '''
              
    P.run(statement)

    # Create sentinel file
    IOTools.touch_file(outfile)

@transform(cellbender,
           regex(r".*/(.*)/.*_cellbender.sentinel"), 
           r"clean_ambient.dir/\1/mtx/\1_mtx.sentinel")
def h5tomtx(infile, outfile):
    '''
    This task runs R/h5_to_mtx.R,
    It exports an .h5 object (e.g. cellbender results) into mtx market
    matrices.
    '''

    outdir = os.path.dirname(outfile)
    if not os.path.exists(outdir):
      os.mkdir(outdir)

    # .h5 
    h5input = infile.replace(".sentinel", "_filtered.h5")
    # Get library id
    library_name = os.path.basename(outfile)[:-len("_mtx.sentinel")]
    # Feature metadata
    feat_file = os.path.join("api/cellranger.multi/GEX/filtered/", 
                             library_name, "mtx/features.tsv.gz")

    # Other settings
    job_threads = PARAMS["resources_threads_export"]
    if ("G" in PARAMS["resources_job_memory"] or
        "M" in PARAMS["resources_job_memory"] ):
        job_memory = PARAMS["resources_job_memory"]

    log_file = outfile.replace(".sentinel", ".log")

    out_file = outfile.replace(".sentinel", ".tsv.gz")

    # Formulate and run statement
    statement = '''Rscript %(code_dir)s/R/h5_to_mtx.R
                 --h5_file=%(h5input)s
                 --features=%(feat_file)s
                 --sample_id=%(library_name)s
                 --numcores=%(job_threads)s
                 --log_filename=%(log_file)s
                 --output_dir=%(outdir)s
              '''
    P.run(statement)

    # Create sentinel file
    IOTools.touch_file(outfile)

# ---------------------------------------------------
# Generic pipeline tasks

@follows(mkdir("clean_ambient.dir"))
@files(None, "clean_ambient.dir/plot.sentinel")
def plot(infile, outfile):
    '''Draw the pipeline flowchart'''

    pipeline_printout_graph ( "clean_ambient.dir/pipeline_flowchart.svg",
                          "svg",
                          [full],
                          no_key_legend=True)

    pipeline_printout_graph ( "clean_ambient.dir/pipeline_flowchart.png",
                          "png",
                          [full],
                          no_key_legend=True)

    IOTools.touch_file(outfile)



@follows(cellbender, h5tomtx, plot)
def full():
    '''
    Run the full pipeline.
    '''
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
