'''
===============
Pipeline dehash
===============


Overview
========

This pipeline dehashes cells which have multiplexed using hash tag oligos (HTOs).

Usage
=====

See :doc:`Installation</Installation>` and :doc:`Usage</Usage>` for general information on how to use cgat
pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.yml` file.

Default configuration files can be generated by executing:
   cellhub celldb config

Code
====

'''

from ruffus import *

import sys
import os
import re
import sqlite3
import pandas as pd
import numpy as np
import glob
from pathlib import Path

import cgatcore.experiment as E
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools
import cgatcore.database as database

import cellhub.tasks.control as C
import cellhub.tasks.dehash as dehash
import cellhub.tasks.api as api

# Override function to collect config files
P.control.write_config_files = C.write_config_files

# -------------------------- < parse parameters > --------------------------- #

# load options from the yml file
parameter_file = C.get_parameter_file(__file__,__name__)
PARAMS = P.get_parameters(parameter_file)

# set the location of the code directory
PARAMS["cellhub_code_dir"] = Path(__file__).parents[1]


# ----------------------- < pipeline configuration > ------------------------ #

# handle pipeline configuration
if len(sys.argv) > 1:
        if(sys.argv[1] == "config") and __name__ == "__main__":
                    sys.exit(P.main(sys.argv))


# ########################################################################### #
# ############################# pipeline tasks ############################## #
# ########################################################################### #

@transform("api/cellranger.multi/ADT/filtered/*/mtx/matrix.mtx.gz",
           regex("api/cellranger.multi/ADT/filtered/(.*)/mtx/matrix.mtx.gz"),
           r"dehash.dir/gmm.demux.dir/\1.gmm.demux.sentinel")
def gmmDemux(infile, outfile):
    '''
    Run gmmDemux
    '''

    library_id = os.path.basename(outfile)[:-len(".gmm.demux.sentinel")]

    input_mtx = os.path.dirname(infile)

    gmm_working_dir = os.path.join(os.path.dirname(outfile),
                                   library_id)

    if not os.path.exists(gmm_working_dir):
        os.makedirs(gmm_working_dir)

    if PARAMS["hto_per_library"] == True:
        HTOs = "_".join([PARAMS["hto"], library_id])

    else:
        HTOs = PARAMS["hto_names"]

    log_file = outfile.replace(".sentinel", ".log")

    statement = '''GMM-demux %(input_mtx)s
                             %(HTOs)s
                             --threshold %(gmm_demux_threshold)s
                             --full %(gmm_working_dir)s/full
                             --simplified %(gmm_working_dir)s/simple
                             --output %(gmm_working_dir)s/SSD
                             --summary %(gmm_demux_ncells)s
                             --report %(gmm_working_dir)s/report
                &> %(log_file)s
                '''

    P.run(statement)

    # parse the output to something more sensible
    # output has columns
    # gmm_cluster_id, gmm_confidence, gmm_call, barcode_id, gmm_singlet
    hto_names = [x.strip() for x in HTOs.split(",")]

    results_dir = "dehash.dir/gmm.demux.dir/results.dir/"

    if not os.path.exists(results_dir):
        os.makedirs(results_dir)

    dehash.parse_gmmdemux(gmm_working_dir,
                          results_dir,
                          library_id,
                          hto_names)

    IOTools.touch_file(outfile)


@merge(gmmDemux,
       "dehash.dir/gmm.demux.api.sentinel")
def gmmAPI(infiles, outfile):
    '''
    Register the GMM-Demux results on the API
    '''

    file_set={}

    for x in infiles:


        library_id = os.path.basename(x)[:-len(".gmm.demux.sentinel")]

        tsv_path = os.path.join(os.path.dirname(x),
                                "results.dir",
                                library_id + ".tsv.gz")

        file_set[library_id] = {"path": tsv_path,
                                "description":"Parsed GMM-demux results for " +\
                                library_id,
                                "format":"tsv"}

    x = api.api("dehash")

    x.define_dataset(analysis_name="gmm.demux",
              data_subset="filtered",
              file_set=file_set,
              analysis_description="per library tables of GMM-demux results")

    x.register_dataset()




# ########################################################################### #
# ##################### full target: to run all tasks ####################### #
# ########################################################################### #

@follows(gmmAPI)
def full():
    pass

def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)

if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
