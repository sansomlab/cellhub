"""
=======================
pipeline_filter_cells.py
=======================

Overview
========

This pipeline filters out a given set of cells from cellranger or cellbender h5.

This is useful e.g. when cell identification has e.g. been performed with cellranger but
we want to use the cellbender corrected counts for downstream analysis.

Usage
=====

See :doc:`Installation</Installation>` and :doc:`Usage</Usage>` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline_filter_cells.yml` file.

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_filter_cells.py config


Inputs
------

The pipeline will filter cells from a cellhub instance according to
the parameters specified in the local pipeline_filter_cells.yml file.


The location of the cellhub instances must be specificed in the yml: ::

   cellhub:
       location: /path/to/cellhub/instance

The source of the cell identification calls (cellranger or cellbender) and of the
counts (cellranger or cellbender) must be specified in the yml.

For each sample registered on the api cells will extracted and saved in anndata
format.

Dependencies
------------

This pipeline requires:

Pipeline output
===============

The pipeline outputs a folder containing a single market matrix
that contains the requested cells.

"""

import os
import sys
import gzip
import glob
from shutil import copyfile

from pathlib import Path
import pandas as pd
from ruffus import *
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools

import cellhub.tasks as T

# -------------------------- Pipeline Configuration -------------------------- #

# Override function to collect config files
P.control.write_config_files = T.write_config_files

# load options from the yml file
P.parameters.HAVE_INITIALIZED = False
PARAMS = P.get_parameters(T.get_parameter_file(__file__))

# set the location of the code directory
PARAMS["cellhub_code_dir"] = Path(__file__).parents[1]

# ------------------------------ Pipeline Tasks ------------------------------ #


    
@follows(mkdir("filter.cells.dir"))
@transform(glob.glob(os.path.join(PARAMS["cellhub_location"],
                                  "api",
                                  PARAMS["cell_id_source"],
                                  "counts/unfiltered/*/h5",
                                  "data.h5")),
           formatter(".*/data.h5"),
           r"filter.cells.dir/{subdir[0][1]}/filter.cells.sentinel")
def filterCells(infile, outfile):
    '''Filter out given sets of cells from unfiltered h5 files.
       e.g. extract cells identified by cellranger from cellbender
       results file.
    '''
    
    t = T.setup(infile, outfile, PARAMS)

    sample = str(os.path.basename(Path(infile).parents[1]))

    cell_barcodes = os.path.join(PARAMS["cellhub_location"],"api",
        PARAMS["cell_id_source"],"counts","filtered", sample,
        "mtx","barcodes.tsv.gz")
        
    unfiltered_h5 = os.path.join(PARAMS["cellhub_location"],"api",
        PARAMS["cell_count_source"],"counts","unfiltered",
        sample, "h5","data.h5")

    sample_outdir = os.path.join("filter.cells.dir",
                                 sample)
    
    if not os.path.exists(sample_outdir):
        os.makedirs(sample_outdir)

    statement = '''python %(cellhub_code_dir)s/python/filter_h5.py 
                   --barcodes=%(cell_barcodes)s
                   --h5=%(unfiltered_h5)s
                   --outfile=%(out_file)s.h5ad
                   &> %(log_file)s
                ''' % dict(PARAMS, **t.var, **locals())

    P.run(statement, **t.resources)
    
    IOTools.touch_file(outfile)


@transform(filterCells,
           regex(r"filter.cells.dir/(.*)/filter.cells.sentinel"),
           r"filter.cells.dir/\1/register.h5.sentinel")
def h5adAPI(infile, outfile):
    '''
    Put the h5ad files on the API

    Inputs:

        The input filter.cells.dir folder layout is:

        filtered "outs": ::

            library_id/filter.cells.h5ad


    '''
    x = T.api("filter.cells")

    out_dir = os.path.dirname(outfile)

    if not os.path.exists(out_dir):
        os.makedirs(out_dir)

    library_id = infile.split("/")[1]

    h5_template = {"h5": {"path":"path/to/barcodes.tsv",
                          "format": "h5ad",
                          "link_name": "data.h5ad",
                          "description": "filtered anndata count file"}
                     }

    # 1. deal with unfiltered count data
    h5ad_location = os.path.join("filter.cells.dir", library_id,
                                "filter.cells.h5ad")

    h5_x = h5_template.copy()
    h5_x["h5"]["path"] = h5ad_location

    x.define_dataset(analysis_name="counts",
                     data_subset="filtered",
                     data_id=library_id,
                     data_format="h5",
                     file_set=h5_x,
                     analysis_description="Anndata h5ad file")


    x.register_dataset()

    # (unfiltered data is not registered).
   
    IOTools.touch_file(outfile)


@transform(filterCells,
           regex(r"filter.cells.dir/(.*)/filter.cells.sentinel"),
           r"filter.cells.dir/\1/mtx.sentinel")
def mtx(infile, outfile):
    '''
        Save h5ad data to mtx format for use in downstream pipelines.
    '''

    t = T.setup(infile, outfile, PARAMS, memory=PARAMS["resources_memory"],
                cpu=PARAMS["resources_ncpu"])
        
    h5ad_path = infile.replace(".sentinel",".h5ad")
    
    # Formulate and run statement
    statement = '''python %(cellhub_code_dir)s/python/export_mtx_from_h5.py
                    --h5=%(h5ad_path)s
                    --mtx_dir=%(outdir)s
                    &> %(log_file)s
                ''' % dict(PARAMS, **t.var, **locals())
                    
    P.run(statement, **t.resources)

    IOTools.touch_file(outfile)


@transform(mtx,
           regex(r"filter.cells.dir/(.*)/mtx.sentinel"),
           r"filter.cells.dir/\1/register.mtx.sentinel")
def mtxAPI(infile, outfile):
    '''
    Put the mtx files on the API

    Inputs:

        The input filter.cells.dir folder layout is:

        filtered "outs": ::

            library_id/...

    '''
    x = T.api("filter.cells")

    out_dir = os.path.dirname(outfile)

    if not os.path.exists(out_dir):
        os.makedirs(out_dir)

    library_id = infile.split("/")[1]

    mtx_template = {"barcodes": {"path":"path/to/barcodes.tsv",
                                 "format": "tsv",
                                 "description": "cell barcode file"},
                    "features": {"path":"path/to/features.tsv",
                                  "format": "tsv",
                                  "description": "features file"},
                     "matrix": {"path":"path/to/matrix.mtx",
                                 "format": "market-matrix",
                                 "description": "Market matrix file"}
                     }


    mtx_x = mtx_template.copy()
    mtx_x["barcodes"]["path"] = os.path.join(out_dir, "barcodes.tsv.gz")
    mtx_x["features"]["path"] = os.path.join(out_dir, "features.tsv.gz")
    mtx_x["matrix"]["path"] =  os.path.join(out_dir, "matrix.mtx.gz")

    x.define_dataset(analysis_name="counts",
                        data_subset="filtered",
                        data_id=library_id,
                        data_format="mtx",
                        file_set=mtx_x,
                        analysis_description="filter cells count output")

    x.register_dataset()

    IOTools.touch_file(outfile)
    

# -------------------------- Generic pipeline tasks -------------------------- #


@follows(h5adAPI, mtxAPI)
def full():
    '''
    Run the full pipeline.
    '''
    pass


# ------------------- < ***** end of pipeline **** > ------------------------ #


@follows(mtxAPI, h5adAPI)
@files(None,"use.filter.cells.sentinel")
def useCounts(infile, outfile):
    '''
        Set the filter cells counts as the source for downstream analysis.
        This task is not run by default.
    '''
    
    if os.path.exists("api/counts"):
        raise ValueError("Counts have already been registered to the API")

    else:
        os.symlink("filter.cells/counts", "api/counts")

def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
