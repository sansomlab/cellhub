"""
======================
pipeline_reference.py
======================

Overview
========

This pipeline performs the following task:

* Build custom reference for 10x GEX data using cellranger mkref.
* Build custom reference for V(D)J analysis using IMGT tool.

Usage
=====

See :doc:`Installation</Installation>` and :doc:`Usage</Usage>` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline.yml` file.

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_reference.py config


Input files
-----------

For custom reference generation for 10x GEX data:
* Reference genome sequence (FASTA file)
* Gene annotations (GTF file)

For generating reference for V(D)J analysis:
* FASTA file suitable for use by mkvdjref generated by cellranger fetch-imgt scripts.

Dependencies
------------

This pipeline requires:
* cgat-core: https://github.com/cgat-developers/cgat-core
* For VDJ reference generation, source the environment of CellRanger 7.1.0 for your shell before submitting the job:
    source path/to/cellranger-7.1.0/sourceme.bash

Pipeline output
===============

The pipeline returns:
A list of barcodes passing emptydrops cell identification and a table with
barcode ranks including all barcodes (this can be used for knee plots).


Code
====

"""
from ruffus import *
from pathlib import Path
import sys
import os
import yaml
import cgatcore.experiment as E
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools
import pandas as pd

import cellhub.tasks as T

# -------------------------- Pipeline Configuration -------------------------- #

# Override function to collect config files
P.control.write_config_files = T.write_config_files

# load options from the yml file
P.parameters.HAVE_INITIALIZED = False
PARAMS = P.get_parameters(T.get_parameter_file(__file__))

# set the location of the code directory
PARAMS["cellhub_code_dir"] = Path(__file__).parents[1]


# -------------------------- Read Parameters -------------------------- #

if str(PARAMS["gex_build"]).lower() in ("1", "true", "yes"):       
    gex_build = True
else:
    gex_build = False
    
if str(PARAMS["vdj_build"]).lower() in ("1", "true", "yes"):       
    vdj_build = True
else:
    vdj_build = False


vdj_fasta_file = PARAMS["vdj_fasta_file"]

# ------------------------------ Pipeline Tasks ------------------------------ #


# ########################################################################### #
# ############################ Build GEX Ref  ############################### #
# ########################################################################### #

@active_if(gex_build)
@follows(mkdir("gex.ref.dir"))
@transform(PARAMS["gex_gtf_file"],
           regex(".*/(.*).gtf"),
           r"gex.ref.dir/\1.mkgtf.sentinel")
def gex_make_gtf(infile, outfile):
    ''' Making GTF File '''
    
    # Setup Memory Option
    t = T.setup(infile, outfile, PARAMS,
                memory=PARAMS["resources_localmem"],
                cpu=PARAMS["resources_localcores"])
    
    # Read Parameters
    gtf_file = PARAMS["gex_gtf_file"]
    filtered_gtf_name = os.path.basename(gtf_file) + ".filtered" 
    filtered_gtf_file = os.path.join(os.path.dirname(outfile), filtered_gtf_name)

    # Run cellranger mkgtf
    statement = '''
                   cellranger mkgtf
                   %(gtf_file)s 
                   %(filtered_gtf_file)s
                   %(gex_biotype_options)s
                   &> %(log_file)s
                ''' % dict(PARAMS,
                            **t.var, 
                            **locals())

    P.run(statement, **t.resources)

    IOTools.touch_file(outfile)

@follows(gex_make_gtf)
@transform(gex_make_gtf,
           regex(r".*/(.*).mkgtf.sentinel"),
           r"./\1.mkgexref.sentinel")
def gex_make_ref(infile, outfile):
    ''' Making Reference '''

    # Read Parameters
    t = T.setup(infile, outfile, PARAMS,
                memory=PARAMS["resources_localmem"],
                cpu=PARAMS["resources_localcores"])
    
    gtf_file = PARAMS["gex_gtf_file"]
    filtered_gtf_name = os.path.basename(gtf_file) + ".filtered" 
    
 
    # Run cellranger mkgtf
    statement = '''cd gex.ref.dir;
                    cellranger mkref 
                   --genome %(gex_genome_name)s 
                   --fasta %(gex_fasta_file)s
                   --genes %(filtered_gtf_name)s
                   &> %(log_file)s
                ''' % dict(PARAMS,
                            **t.var, 
                            **locals())

    P.run(statement, **t.resources)

    IOTools.touch_file(outfile)

    
    

# ########################################################################### #
# ############################ Build VDJ Ref  ############################### #
# ########################################################################### #

@active_if(vdj_build)
@follows(mkdir("vdj.ref.dir"))
@transform(PARAMS["vdj_fasta_file"],
           regex(".*/(.*).fasta"),
           r"./\1.mkvdjref.sentinel")
def vdj_make_ref(infile, outfile):
    ''' Make VDJ Reference File '''

    # Read Parameters
    t = T.setup(infile, outfile, PARAMS,
                memory=PARAMS["resources_localmem"],
                cpu=PARAMS["resources_localcores"])

    
    statement = '''cd vdj.ref.dir;
                  cellranger mkvdjref
                  --genome %(vdj_genome_name)s
                  --seqs %(vdj_fasta_file)s
                  &> %(log_file)s
                ''' % dict(PARAMS,
                            **t.var, 
                            **locals())

    P.run(statement, **t.resources)

    IOTools.touch_file(outfile)


# ----------------------- Full Target and Main Function ---------------------- #

@follows(gex_make_ref, vdj_make_ref)
def full():
    '''
    Run the full pipeline.
    '''
    pass

def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)

if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
