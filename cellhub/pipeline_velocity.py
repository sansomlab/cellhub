"""
=================
Pipeline Velocity
=================

Overview
========

This pipeline performs the following steps:

* sort bam file by cell barcode
* estimate intronic and exonic reads using velocyto (on selected barcodes)

Usage
=====

See :doc:`Installation</Installation>` and :doc:`Usage</Usage>` on general
information how to use CGAT pipelines.

Configuration
-------------

The pipeline requires a configured :file:`pipeline_velocity.yml` file.

Default configuration files can be generated by executing:

   python <srcdir>/pipeline_velocity.py config


Input files
-----------

The pipeline is run from bam files generated by cellranger count.

The pipeline expects a tsv file containing the path to each cellranger
bam file (path) and the respective sample_id for each sample.
In addition a list of barcodes is required, this could be the filtered
barcodes from cellranger or a custom input (can be gzipped file).
Any further metadata can be added to the file. The required columns
are sample_id, barcodes and path.


Dependencies
------------

This pipeline requires:
* cgat-core: https://github.com/cgat-developers/cgat-core
* samtools
* veloctyo


Pipeline output
===============

The pipeline returns:
* a loom file with intronic and exonic reads for use in scvelo analysis

Code
====

"""
from ruffus import *
from pathlib import Path
import sys
import os
import cgatcore.experiment as E
from cgatcore import pipeline as P
import cgatcore.iotools as IOTools
import pandas as pd
import glob
import cellhub.tasks.control as C

# Override function to collect config files
P.control.write_config_files = C.write_config_files


# -------------------------- < parse parameters > --------------------------- #

# load options from the config file
PARAMS = P.get_parameters(
    ["%s/pipeline_velocity.yml" % os.path.splitext(__file__)[0],
     "../pipeline_velocity.yml",
     "pipeline_velocity.yml"])

# set the location of the tenx code directory
PARAMS["code_dir"] = Path(__file__).parents[1]

# ----------------------- < pipeline configuration > ------------------------ #

# handle pipeline configuration
if len(sys.argv) > 1:
        if(sys.argv[1] == "config") and __name__ == "__main__":
                    sys.exit(P.main(sys.argv))

# ########################################################################### #
# ##################### Run velocyto on sorted bam ########################## #
# ########################################################################### #

@follows(mkdir("velocity.dir"))
@transform(glob.glob("cellranger.multi.dir/*/outs/per_sample_outs/*/count/sample_alignments.bam"),
           regex(r".*/.*/.*/.*/(.*)/count/sample_alignments.bam"),
           r"velocity.dir/\1/\1_run_velocity.sentinel")
def runVelocyto(infile, outfile):
    '''Run velocyto on barcode-sorted bam file. This task writes a loom file
       into the pipeline-run directory for each sample.'''

    sample_name = os.path.basename(outfile).replace("_run_velocity.sentinel", "")
    reference = os.path.join(str(PARAMS["velocyto_cellranger_anno"]),
                             "genes", "genes.gtf")
    outdir = os.path.dirname(outfile)
    if not os.path.exists(outdir):
        os.makedirs(outdir)

    bcfile = os.path.join("cellranger.multi.dir", sample_name, "outs", 
            "per_sample_outs", sample_name, "count", "sample_feature_bc_matrix", 
            "barcodes.tsv.gz")

    bam_folder = os.path.dirname(infile)
    sort_outfile = os.path.join(bam_folder, "sample_alignments.bam")
    log_file = outfile.replace("sentinel", "log")

    if "M" in PARAMS["velocyto_memory"]:
        job_memory = PARAMS["velocyto_memory"]

    job_threads = PARAMS["velocyto_threads"]
    statement = '''velocyto run --bcfile %(bcfile)s
                   --outputfolder %(outdir)s
                   --sampleid %(sample_name)s  -vvv
                   %(sort_outfile)s %(reference)s &> %(log_file)s
                '''
    P.run(statement)

    IOTools.touch_file(outfile)

# ---------------------------------------------------
# Generic pipeline tasks

@follows(runVelocyto)
def full():
    '''
    Run the full pipeline.
    '''
    pass


def main(argv=None):
    if argv is None:
        argv = sys.argv
    P.main(argv)


if __name__ == "__main__":
    sys.exit(P.main(sys.argv))
