database:
    # database location and name
    url: sqlite:///./celldb.dir/csvdb


# Tables that will be loaded into the celldb
# ==========================================
#
# * Tables with per-cell information must contain the columns
#    "barcode" and "library_id"
#
# * Indexes are automatically created for: 
#   (sample_id), (library_id), (library_id, barcode_id)
#
# * Recognised table parameters (keys) are:
#   - name: the name of the table that will be created in the database
#   - path: the path to a directory containing a set of tables OR
#         to a single file containing a table
#   - glob: *if* path is a directory: a glob expression to be expanded to 
#          match the set of tables (optional)
#   - extra_indexes: Comma seperated list of extra indexes to be set
#          (optional)

table:

    # Sample table
    # ------------  
    # This is a required, user supplied table. It contains:
    #
    # (1) the mapping of sample_id to library_id
    # (2) sample metadata fields as appropriate such as
    #     condition, genotype, replicate etc
    # (3) the mapping of sample_ids to demultiplexing IDs
    #     as/if needed for multiplexed experiments.
    sample:
      name: sample
      path: samples.tsv

    # QC metrics (GEX)
    # ----------------
    # location of the qcmetrics data directory
    # output of the pipeline_cell_qc.py
    # qcmetrics: qcmetrics.dir
    gex_qcmetrics:
      name: gex_qcmetrics
      path: api/cell.qc/qcmetrics/filtered
      glob: "*.tsv.gz"

    # Scrublet scores (GEX)
    # ---------------------
    # The location of the scrublet output directory
    # output of the pipeline_cell_qc.py
    # scrublet: scrublet.dir
    gex_scrublet:
      name: gex_scrublet
      path: api/cell.qc/scrublet/filtered
      glob: "*.tsv.gz"

    # SingleR (optional)
    # ------------------
    # The location of the singleR output directory
    # output of the pipeline_singleR.py
    gex_singleR:
      active: True
      name: gex_singleR
      path: api/singleR/summary/summary.tsv.gz

    # GMM demux results (optional)
    # ----------------------------
    # location of the gmm_demux results
    # output of the pipeline_dehash.py
    gmm_demux:
      active: False
      name: gmm_demux
      path: api/dehash/gmm.demux/filtered
      glob: "*.tsv.gz"

    # demuxEM results (optional)
    # ----------------------------
    # location of the demuxEM results
    # output of the pipeline_dehash.py
    demuxEM:
      active: False
      name: demuxEM
      path: api/dehash/demuxEM/filtered
      glob: "*.tsv.gz"

    # ADT qcmetrics results (optional)
    # ---------------------------------
    # location for ADT qc metric
    # output of the pipeline_cell_qc.py
    adt_qcmetrics:
      active: False
      name: gex_scrublet
      path: scrublet.dir
      glob: "*.tsv.gz"

    # souporcell results (optional)
    # ---------------------------------
    # location for souporcell results
    # output of the pipeline_souporcell.py
    souporcell:
      active: False
      name: souporcell
      path: api/demultiplex/souporcell
      glob: "*.tsv"

    # Final view creation statement
    # -----------------------------
    # The SQL statement used to create the
    # "final" view on the database from which
    # cell information will be fetched.
    final:
      sql_query: >-
        CREATE VIEW final AS
        SELECT s.*, qc.*, scrub.*, sr.*
        FROM gex_qcmetrics qc
        LEFT JOIN sample s
        USING (library_id)
        LEFT JOIN gex_scrublet scrub
        USING (library_id, barcode)
        LEFT JOIN gex_singleR sr
        USING (library_id, barcode); 
        

      # Query example for a hashed dataset.
      # *** note that the sample table is joined
      #     on library_id AND hto_id ***
      #
      # sql_query: >-
      #   CREATE VIEW final AS
      #   SELECT s.*, qc.*, scrub.*, gd.*
      #   FROM gex_qcmetrics qc
      #   LEFT JOIN gex_scrublet scrub
      #   USING (library_id, barcode)
      #   LEFT JOIN gmm_demux gd
      #   USING (library_id, barcode)
      #   LEFT JOIN sample s
      #   on qc.library_id = s.library_id AND gd.gmm_call = s.hto_id;


      # Query example for a dataset with souporcell result.
      # *** note that the sample table is joined
      #     on library_id AND hto_id ***
      #
      # sql_query: >-
      #  CREATE VIEW final AS
      #  SELECT s.*, qc.*, scrub.*, sr.*, sp.*
      #  FROM gex_qcmetrics qc
      #  LEFT JOIN sample s
      #  USING (library_id)
      #  LEFT JOIN gex_scrublet scrub
      #  USING (library_id, barcode)
      #  LEFT JOIN gex_singleR sr
      #  USING (library_id, barcode)
      #  LEFT JOIN souporcell sp
      #  USING (library_id, barcode);